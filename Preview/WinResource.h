//////////////////////////////////////////////////////////////////////

#pragma once

//////////////////////////////////////////////////////////////////////

struct Resource
{
	Resource();
	virtual ~Resource();

	//////////////////////////////////////////////////////////////////////

	bool IsValid() const
	{
		return data != null;
	}

	//////////////////////////////////////////////////////////////////////

	operator void const *() const
	{
		return data;
	}

	//////////////////////////////////////////////////////////////////////

	size_t Size() const
	{
		return size;
	}

	//////////////////////////////////////////////////////////////////////

protected:

	void *		data;
	size_t		size;
};

//////////////////////////////////////////////////////////////////////

struct FileResource: Resource
{
	FileResource(tchar const *name);
	~FileResource();
};

//////////////////////////////////////////////////////////////////////

struct WinResource: Resource
{
	WinResource(DWORD resourceID);
	~WinResource();
};

//////////////////////////////////////////////////////////////////////

class CoTaskBuffer
{
public:

	CoTaskBuffer() : ptr(null)
	{
	}

	CoTaskBuffer(size_t size) : ptr(CoTaskMemAlloc(size))
	{
	}

	bool IsValid() const
	{
		return ptr != null;
	}

	bool Resize(size_t size)
	{
		Free();
		ptr = CoTaskMemAlloc(size);
		return ptr != null;
	}

	void Free()
	{
		if(ptr != null)
		{
			CoTaskMemFree(ptr);
			ptr = null;
		}
	}

	~CoTaskBuffer()
	{
		Free();
	}

	operator void const *() const
	{
		return ptr;
	}

	operator void *()
	{
		return ptr;
	}

private:
	void *ptr;
};

//////////////////////////////////////////////////////////////////////

