//////////////////////////////////////////////////////////////////////

struct Rect : RECT
{
	//////////////////////////////////////////////////////////////////////

	Rect()
	{
	}

	//////////////////////////////////////////////////////////////////////

	Rect(Point topLeft, Size size)
	{
		left = topLeft.x;
		top = topLeft.y;
		right = left + size.Width();
		bottom = top + size.Height();
	}

	//////////////////////////////////////////////////////////////////////

	Rect(Vec2 topLeft, Vec2 size)
	{
		left = (LONG)topLeft.x;
		top = (LONG)topLeft.y;
		right = (LONG)(left + size.x);
		bottom = (LONG)(top + size.y);
	}

	//////////////////////////////////////////////////////////////////////

	Rect(int x, int y, int width, int height)
	{
		left = x;
		top = y;
		right = x + width;
		bottom = y + height;
	}

	//////////////////////////////////////////////////////////////////////

	bool Contains(Point p) const
	{
		return p.x >= left && p.x < right && p.y >= top && p.y < bottom;
	}

	//////////////////////////////////////////////////////////////////////

	int Width() const
	{
		return right - left;
	}

	//////////////////////////////////////////////////////////////////////

	int Height() const
	{
		return bottom - top;
	}

	//////////////////////////////////////////////////////////////////////

	Size GetSize() const
	{
		return Size(Width(), Height());
	}

	//////////////////////////////////////////////////////////////////////

	void MoveTo(Point pos)
	{
		right = pos.x + Width();
		bottom = pos.y + Height();
		left = pos.x;
		top = pos.y;
	}

	//////////////////////////////////////////////////////////////////////

	void Translate(Point offset)
	{
		left += offset.x;
		top += offset.y;
		right += offset.x;
		bottom += offset.y;
	}

	//////////////////////////////////////////////////////////////////////

	void Resize(Size newSize)
	{
		right = left + newSize.Width();
		bottom = top + newSize.Height();
	}
};
