//////////////////////////////////////////////////////////////////////

struct Rect: RECT
{
	//////////////////////////////////////////////////////////////////////

	Rect()
	{
	}

	//////////////////////////////////////////////////////////////////////

	Rect(Point topLeft, Size size)
	{
		left = topLeft.x;
		top = topLeft.y;
		right = left + size.Width();
		bottom = top + size.Height();
	}

	//////////////////////////////////////////////////////////////////////

	Rect(Vec2 topLeft, Vec2 size)
	{
		left = (LONG)topLeft.x;
		top = (LONG)topLeft.y;
		right = (LONG)(left + size.x);
		bottom = (LONG)(top + size.y);
	}

	//////////////////////////////////////////////////////////////////////

	Rect(int x, int y, int width, int height)
	{
		left = x;
		top = y;
		right = x + width;
		bottom = y + height;
	}

	//////////////////////////////////////////////////////////////////////

	bool Contains(Point p) const
	{
		return p.x >= left && p.x < right && p.y >= top && p.y < bottom;
	}

	//////////////////////////////////////////////////////////////////////

	int Width() const
	{
		return right - left;
	}

	//////////////////////////////////////////////////////////////////////

	int Height() const
	{
		return bottom - top;
	}

	//////////////////////////////////////////////////////////////////////

	Size GetSize() const
	{
		return Size(Width(), Height());
	}

	//////////////////////////////////////////////////////////////////////

	Vec2 FSize() const
	{
		return Vec2((float)Width(), (float)Height());
	}

	//////////////////////////////////////////////////////////////////////

	void MoveTo(Point pos)
	{
		right = pos.x + Width();
		bottom = pos.y + Height();
		left = pos.x;
		top = pos.y;
	}

	//////////////////////////////////////////////////////////////////////

	void Translate(Point offset)
	{
		left += offset.x;
		top += offset.y;
		right += offset.x;
		bottom += offset.y;
	}

	//////////////////////////////////////////////////////////////////////

	void Resize(Size newSize)
	{
		right = left + newSize.Width();
		bottom = top + newSize.Height();
	}
};

//////////////////////////////////////////////////////////////////////

struct RectF
{
	//////////////////////////////////////////////////////////////////////

	Vec2 TopLeft;
	Vec2 BottomRight;

	//////////////////////////////////////////////////////////////////////

	RectF()
	{
	}

	//////////////////////////////////////////////////////////////////////

	RectF(Vec2 const &topLeft, Vec2 const &bottomRight)
		: TopLeft(topLeft)
		, BottomRight(bottomRight)
	{
	}

	//////////////////////////////////////////////////////////////////////

	void Set(Vec2 const &topLeft, Vec2 const &bottomRight)
	{
		TopLeft = topLeft;
		BottomRight = bottomRight;
	}

	//////////////////////////////////////////////////////////////////////

	float Width() const
	{
		return BottomRight.x - TopLeft.x;
	}

	//////////////////////////////////////////////////////////////////////

	float Height() const
	{
		return BottomRight.y - TopLeft.y;
	}

	//////////////////////////////////////////////////////////////////////

	Vec2 Size() const
	{
		return BottomRight - TopLeft;
	}

	//////////////////////////////////////////////////////////////////////

	Vec2 MidPoint() const
	{
		return TopLeft + Size() * 0.5f;
	}

	//////////////////////////////////////////////////////////////////////

	bool Contains(Vec2 const &p) const
	{
		return p.x >= TopLeft.x && p.x < BottomRight.x && p.y >= TopLeft.y && p.y < BottomRight.y;
	}

	//////////////////////////////////////////////////////////////////////

	void Resize(Vec2 const &size)
	{
		BottomRight = TopLeft + size;
	}

	//////////////////////////////////////////////////////////////////////

	void MoveTo(Vec2 const &newTopLeft)
	{
		Vec2 delta = newTopLeft - TopLeft;
		BottomRight += delta;
		TopLeft = newTopLeft;
	}

	//////////////////////////////////////////////////////////////////////

	void Translate(Vec2 const &offset)
	{
		TopLeft += offset;
		BottomRight += offset;
	}
	
	//////////////////////////////////////////////////////////////////////

	bool operator == (RectF const &b)
	{
		return TopLeft == b.TopLeft && BottomRight == b.BottomRight;
	}
};

